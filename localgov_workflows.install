<?php

/**
 * @file
 * Install, update and uninstall functions for the LocalGov Workflow module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Config\FileStorage;
use Drupal\scheduled_transitions\Form\ScheduledTransitionsSettingsForm;
use Drupal\workflows\Entity\Workflow;

/**
 * Implements hook_install().
 */
function localgov_workflows_install() {

  // Add workflow to localgov_ node bundles with no other workflow.
  $editorial = Workflow::load('localgov_editorial');
  if (!$editorial) {
    $config_source = new FileStorage(drupal_get_path('module', 'localgov_workflows') . '/config/install');
    $editorial_config = $config_source->read('workflows.workflow.localgov_editorial');
    $config_storage = \Drupal::service('config.storage');
    $config_storage->write('workflows.workflow.localgov_editorial', $editorial_config);
    $editorial = Workflow::load('localgov_editorial');
  }

  $workflow_type = $editorial->getTypePlugin();
  $node_types = \Drupal::service('entity_type.bundle.info')->getBundleInfo('node');
  $changed = FALSE;
  foreach ($node_types as $type_name => $node_type) {
    if (strpos($type_name, 'localgov_') === 0 && empty($node_type['workflow'])) {
      $workflow_type->addEntityTypeAndBundle('node', $type_name);
      $changed = TRUE;
    }
  }

  if ($changed) {
    $editorial->save();
  }

  // Enable scheduled transitions for all node bundles.
  $scheduled_transitions_config = \Drupal::service('config.factory')->getEditable('scheduled_transitions.settings');
  $bundles = [];
  foreach ($node_types as $bundle => $node_type) {
    $bundles[] = [
      'entity_type' => 'node',
      'bundle' => $bundle,
    ];
  }
  $scheduled_transitions_config->set('bundles', $bundles);
  $scheduled_transitions_config->save();
  Cache::invalidateTags([
    ScheduledTransitionsSettingsForm::SETTINGS_TAG,
    'config:scheduled_transitions.settings',
  ]);

  // Reload user permissions defined in hook_localgov_roles_default().
  $roles = \Drupal::service('module_handler')->invokeAll('localgov_roles_default');
  foreach ($roles as $role => $permissions) {
    user_role_grant_permissions($role, $permissions);
  }
}
